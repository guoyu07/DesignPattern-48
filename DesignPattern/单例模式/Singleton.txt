

单例模式:
 http://blog.csdn.net/lovelion/article/details/7420883

概念:
单例模式(Singleton Pattern): 确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。单例模式是一种对象创建型模式。
单例模式有三个要点: 一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。

实现:
OC中有两种实现, 一种是所有语言通用的双重锁机制, 另一种是利用GCD中的 dispatch_once 方法.



单例模式结构图中只包含一个单例角色：
● Singleton（单例）: 在单例类的内部实现只生成一个实例，同时它提供一个静态的getInstance()工厂方法，让客户可以访问它的唯一实例；为了防止在外部对其实例化，将其构造函数设计为私有；在单例类内部定义了一个Singleton类型的静态对象，作为外部共享的唯一实例。




饿汉式单例与懒汉式单例:
饿汉式单例, 类在加载时候就开始创建单例对象.
懒汉式单例, 第一次调用静态方法获取单例对象时候创建单例对象. 就像oc中的懒加载.











